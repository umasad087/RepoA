name: Trigger and Wait for Other Repository Workflow

on:
  push:
    branches:
      - main

jobs:
  # First job: triggers a workflow in another repository
  trigger-one:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger workflow in other repository
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${TOKEN}" \
            https://api.github.com/repos/umasad087/RepoB/dispatches \
            -d '{"event_type": "triggered-from-other-repo"}'
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # Second job: waits for the triggered workflow to complete before continuing
  wait-one:
    needs: trigger-one  # Ensure that this job waits until the "trigger" job finishes
    runs-on: ubuntu-latest
    steps:
      - name: Wait for the triggered workflow to complete
        run: |
          sleep 10  # Wait a bit for the secondary workflow to start
          STATUS="queued"
          while [[ "$STATUS" == "queued" || "$STATUS" == "in_progress" ]]
          do
            # Check the workflow runs in the secondary repository
            WORKFLOWS=$(curl -H "Authorization: token ${TOKEN}" \
              "https://api.github.com/repos/umasad087/RepoB/actions/runs?event=repository_dispatch")
            # Extract the workflow run ID and status
            WORKFLOW_ID=$(echo $WORKFLOWS | jq '[.workflow_runs[] | select(.head_branch=="main" and .status!="completed")] | .[0].id')
            STATUS=$(echo $WORKFLOWS | jq -r '.workflow_runs[] | select(.id=='"$WORKFLOW_ID"').status')
            if [[ "$STATUS" == "completed" ]]
            then
              echo "Workflow status: $STATUS."
              break
            fi
            echo "Workflow status: $STATUS. Waiting..."
            sleep 60  # Wait for 60 seconds before checking again
          done
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # Third job: build and test, which depends on the "wait" job
  build-test:
    needs: wait-one  # Make sure this job only runs after the "wait" job finishes
    runs-on: ubuntu-latest
    steps:
      - name: Build and Test
        run: |
          echo "I am building the code..."
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  # fourth job
  trigger-two:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger workflow in another repository
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${TOKEN}" \
            https://api.github.com/repos/umasad087/RepoB/dispatches \
            -d '{"event_type": "triggered-from-other-repo"}'
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # 5th job: waits for the triggered workflow to complete before continuing
  wait-two:
    needs: trigger-two  # Ensure that this job waits until the "trigger" job finishes
    runs-on: ubuntu-latest
    steps:
      - name: Wait for the 2nd triggered workflow to complete
        run: |
          sleep 10  # Wait a bit for the secondary workflow to start
          STATUS="queued"
          while [[ "$STATUS" == "queued" || "$STATUS" == "in_progress" ]]
          do
            # Check the workflow runs in the secondary repository
            WORKFLOWS=$(curl -H "Authorization: token ${TOKEN}" \
              "https://api.github.com/repos/umasad087/RepoB/actions/runs?event=repository_dispatch")
            # Extract the workflow run ID and status
            WORKFLOW_ID=$(echo $WORKFLOWS | jq '[.workflow_runs[] | select(.head_branch=="main" and .status!="completed")] | .[0].id')
            STATUS=$(echo $WORKFLOWS | jq -r '.workflow_runs[] | select(.id=='"$WORKFLOW_ID"').status')
            if [[ "$STATUS" == "completed" ]]
            then
              echo "Workflow status: $STATUS."
              break
            fi
            echo "Workflow status: $STATUS. Waiting..."
            sleep 60  # Wait for 60 seconds before checking again
          done
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # sixth job: build and test, which depends on the "wait" job
  deploy:
    needs: wait-two  # Make sure this job only runs after the "wait" job finishes
    runs-on: ubuntu-latest
    steps:
      - name: deploy
        run: |
          echo "I am deploying the code..."
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
