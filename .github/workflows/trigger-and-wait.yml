name: Trigger and Wait for Other Repository Workflow

on:
  repository_dispatch:
    type: [main-workflow]
  
jobs:
  snyk-code-OSS-scan:
    runs-on: ubuntu-latest
    steps:
      - name: snyk code and OSS scan
        run: |
          echo "Initial Snyk setup on runner code goes here"
          echo "Snyk code scan code goes here"
          echo "Snyk OSS scan code goes here"
  # First job: triggers a workflow in another repository
  trigger-compile-code:
    needs: snyk-code-OSS-scan
    runs-on: ubuntu-latest
    steps:
      - name: Trigger workflow in child repository to compile code
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${TOKEN}" \
            https://api.github.com/repos/umasad087/RepoB/dispatches \
            -d '{"event_type": "compile-code"}'
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # Second job: waits for the triggered workflow to complete before continuing
  wait-one:
    needs: trigger-compile-code  # Ensure that this job waits until the "trigger" job finishes
    runs-on: ubuntu-latest
    steps:
      - name: Wait for the triggered workflow to complete
        run: |
            # Set the initial status and loop interval
            STATUS="queued"
            INTERVAL= 15  # Poll every 15 seconds
          
            # Use the GitHub API to check for completion
            while [[ "$STATUS" == "queued" || "$STATUS" == "in_progress" ]]; do
              WORKFLOWS=$(curl -H "Authorization: token ${PERSONAL_ACCESS_TOKEN}" \
                "https://api.github.com/repos/umasad087/repoB/actions/runs?event=main-workflow-initiate")

              # Extract the workflow status
              STATUS=$(echo "$WORKFLOWS" | jq -r '.workflow_runs[] | select(.status!="completed").status')

              if [[ "$STATUS" == "completed" ]]; then
                echo "Workflow status: $STATUS."
                break
              fi
            
              echo "Workflow status: $STATUS. Polling again in $INTERVAL seconds..."
              sleep "$INTERVAL"
            done
          #sleep 10  # Wait a bit for the secondary workflow to start
          #STATUS="queued"
          #while [[ "$STATUS" == "queued" || "$STATUS" == "in_progress" ]]
          #do
            # Check the workflow runs in the secondary repository
          #  WORKFLOWS=$(curl -H "Authorization: token ${TOKEN}" \
           #   "https://api.github.com/repos/umasad087/RepoB/actions/runs?event=repository_dispatch")
            # Extract the workflow run ID and status
            #WORKFLOW_ID=$(echo $WORKFLOWS | jq '[.workflow_runs[] | select(.head_branch=="main" and .status!="completed")] | .[0].id')
            #STATUS=$(echo $WORKFLOWS | jq -r '.workflow_runs[] | select(.id=='"$WORKFLOW_ID"').status')
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # Third job: build and test, which depends on the "wait" job
  snyk-image-scan:
    needs: wait-one  # Make sure this job only runs after the "wait" job finishes
    runs-on: ubuntu-latest
    steps:
      - name: snyk-image-scan
        run: |
          echo "Snyk image scan code goes here."

  # fourth job
  trigger-deploy:
    needs: snyk-image-scan
    runs-on: ubuntu-latest
    steps:
      - name: Trigger workflow in child repository to deploy image
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${TOKEN}" \
            https://api.github.com/repos/umasad087/RepoB/dispatches \
            -d '{"event_type": "deploy-image"}'
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # 5th job: waits for the triggered workflow to complete before continuing
  wait-two:
    needs: trigger-deploy  # Ensure that this job waits until the "trigger" job finishes
    runs-on: ubuntu-latest
    steps:
      - name: Wait for the deploy workflow to complete
        run: |
            # Set the initial status and loop interval
            STATUS="queued"
            INTERVAL=15  # Poll every 15 seconds
          
            # Use the GitHub API to check for completion
            while [[ "$STATUS" == "queued" || "$STATUS" == "in_progress" ]]; do
              WORKFLOWS=$(curl -H "Authorization: token ${PERSONAL_ACCESS_TOKEN}" \
                "https://api.github.com/repos/umasad087/repoB/actions/runs?event=main-workflow-initiate")

              # Extract the workflow status
              STATUS=$(echo "$WORKFLOWS" | jq -r '.workflow_runs[] | select(.status!="completed").status')

              if [[ "$STATUS" == "completed" ]]; then
                echo "Workflow status: $STATUS."
                break
              fi
            
              echo "Workflow status: $STATUS. Polling again in $INTERVAL seconds..."
              sleep "$INTERVAL"
            done
          #sleep 10  # Wait a bit for the secondary workflow to start
          #STATUS="queued"
          #while [[ "$STATUS" == "queued" || "$STATUS" == "in_progress" ]]
          #do
            # Check the workflow runs in the secondary repository
           # WORKFLOWS=$(curl -H "Authorization: token ${TOKEN}" \
            #  "https://api.github.com/repos/umasad087/RepoB/actions/runs?event=repository_dispatch")
            # Extract the workflow run ID and status
            #WORKFLOW_ID=$(echo $WORKFLOWS | jq '[.workflow_runs[] | select(.head_branch=="main" and .status!="completed")] | .[0].id')
            #STATUS=$(echo $WORKFLOWS | jq -r '.workflow_runs[] | select(.id=='"$WORKFLOW_ID"').status')
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # sixth job: build and test, which depends on the "wait" job
  end-pipeline:
    needs: wait-two  # Make sure this job only runs after the "wait" job finishes
    runs-on: ubuntu-latest
    steps:
      - name: end-main-pipeline
        run: |
          echo "successfully deployed"
